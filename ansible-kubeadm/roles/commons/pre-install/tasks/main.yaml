---

- name: Install apt-transport-https and curl
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
    pkg:
      - apt-transport-https
      - curl

- name: Add an Apt signing key, uses whichever key is at the URL
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes repository into sources list
  ansible.builtin.apt_repository:
    repo: "deb https://apt.kubernetes.io kubernetes-xenial main"
    state: present

- name: Install kubeadm, kubelet, kubectl
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
    pkg:
      - kubeadm
      - kubelet
      - kubectl

- name: zero padding
  command: dd if=/dev/zero of={{ swap_file_path }} bs=1M count={{ ansible_memtotal_mb * 2 }}
  args:
    creates: '{{ swap_file_path }}'

- name: chmod swap file
  file:
    path: '{{ swap_file_path }}'
    mode: '0600'

- name: set up a Linux swap area
  command: mkswap {{ swap_file_path }}
  when: ansible_swaptotal_mb == 0

- name: enable file for swapping
  command: swapon {{ swap_file_path }}
  when: ansible_swaptotal_mb == 0

- name: mount swap
  mount:
    name: swap
    src: '{{ swap_file_path }}'
    fstype: swap
    opts: defaults
    passno: '0'
    dump: '0'
    state: present

- name: modprebe br_netfilter
  command: modprobe br_netfilter

- name: Disable swappiness and pass bridged IPv4 traffic to iptable's chains
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

- name: Reload kubelet daemon
  systemd:
    name: kubelet
    daemon_reload: yes
    enabled: yes

- name: Set the policy for the INPUT chain to ACCEPT
  ansible.builtin.iptables:
    chain: INPUT
    policy: ACCEPT

- name: Set the policy for the OUTPUT chain to ACCEPT
  ansible.builtin.iptables:
    chain: OUTPUT
    policy: ACCEPT

- name: Set the policy for the FORWARD chain to ACCEPT
  ansible.builtin.iptables:
    chain: FORWARD
    policy: ACCEPT

- name: Iptables flush filter
  ansible.builtin.iptables:
    chain: "{{ item }}"
    flush: yes
  with_items:  [ 'INPUT', 'FORWARD', 'OUTPUT' ]